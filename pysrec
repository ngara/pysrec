#!/usr/bin/env python3
"""
The command line interface for pysrec.
"""

import os

import click

from zwuenf.pysrec.SRecord import SRecord
from zwuenf.pysrec.SRecordFile import SRecordFile
from zwuenf.pysrec import SRECError, NotSRecFileError


@click.group()
def cli():
    """
    Command line interface for pysrec. Use --help for details.
    """
    pass


@cli.command(
    short_help='Print Motorola S-record file.',
    help="""Print the lines of a Motorola S-Record file.""")
@click.option('--start', default=0, help='Line to start with printing. (allows python style indexing)')
@click.option('--end', default=0, help='Line to end with printing. (allows python style indexing)')
@click.option('--errors/--no-errors', default=False, help='Don\'t stop displaying the file on parsing errors.')
@click.option('--color/--no-color', default=True, help='Display S-Record colored to improve readability')
@click.option('--lines/--no-lines', default=True, help='Display line-numbers')
@click.argument('file')
def cat(start, end, errors, color, lines, file):
    if not os.path.isfile(file):
        click.echo('File: "{}", is not a file or does not exist.'.format(file))
        exit(1)

    with open(file) as f:
        records = f.readlines()

    if end is 0:
        end = len(records)

    for i, line in enumerate(records[start:end]):
        try:
            num = '' if not lines else '[{:08d}] '.format(i)
            click.echo('{}{}'.format(num, SRecord(line).build_str(color)))
        except SRECError:
            if errors:
                click.echo('Line could no be parsed! Try again with --no-errors to ignore errors.')
                exit(1)
            pass


@cli.command(
    short_help='Show information about a Motorola S-Record file.',
    help="""Show information about a Motorola S-Record file.""")
@click.argument('file')
def info(file):
    if not os.path.isfile(file):
        print('"{}", is not a file or does not exist.'.format(file))
        exit(1)

    click.echo('=' * 64)
    click.echo('Analysing file: {}'.format(file))
    click.echo('=' * 64)

    try:
        file = SRecordFile(file)
    except NotSRecFileError:
        click.echo('File: "{}", is not a Motorola S-Record file.'.format(file))

    click.echo('MOT Type: {}'.format(str(file.mot_type()).split('.')[1]))

    click.echo('Records:')
    count = file.record_counts()
    for t in count:
        click.echo('    S{}: {}'.format(hex(t)[2:].upper(), count[t]))

    if file.has_header():
        click.echo('Header: {}'.format(file.header_content()))
    else:
        click.echo('Header: No Header-Record was found!')

    click.echo('Min. address: {}'.format(hex(file.min_address())))
    click.echo('Max. address: {}'.format(hex(file.max_address())))

    click.echo('='*64)
    click.echo()


@cli.command(
    short_help='Check a Motorola S-Record file.',
    help="""Check a Motorola S-Record file for abnormality and errors.""")
@click.option('--full', help='Test file with all implemented checks.')
@click.option('--types', help='Test TYPE field for valid SX types')
@click.option('--count', help='Test COUNT field for valid byte count.')
@click.option('--addr', help='Test ADDRESS field for valid representation and length.')
@click.option('--data', help='Test DATA field for valid representation and length.')
@click.option('--crc', help='Test CRC fields.')
@click.option('--ascii', help='Test if file is in a valid ASCII representation.')
@click.argument('file')
def check(full, types, count, addr, data, crc, ascii, file):
    click.echo()
    click.echo("Not implemented yet!")


if __name__ == '__main__':
    cli()